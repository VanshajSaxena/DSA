* Big O Notation

** /"How code slows as data grows."/

   ~ Describes the performance of an algorithm as the amount of data increases.
   ~ Machine Independent. (Number of steps to completion.)
   ~ Ignore smaller operations. O(n+1) -> O(n)

*** O(1) - Constant Time
    - The number of steps does not change with the amount of data.
    @code java
    int addUp(int n) {
      return n * (n + 1) / 2;
    }
    @end

*** O(log n) - Logarithmic Time
    - The number of steps increases logarithmically with the amount of data.
    @code java
    int binarySearch(int[] array, int target) {
      int low = 0;
      int high = array.length - 1;
      while (low <= high) {
        int mid = (low + high) / 2;
        if (array[mid] == target) {
          return mid;
        } else if (array[mid] < target) {
          low = mid + 1;
        } else {
          high = mid - 1;
        }
      }
      return -1;
    }
    @end

*** O(n) - Linear Time
    - The number of steps increases linearly with the amount of data.
    @code java
    int addUp(int n) {
      int sum = 0;
      for (int i = 1; i <= n; i++) {
        sum += i;
      }
      return sum;
    }
    @end

*** O(n log n) - Quasilinear Time
    - The number of steps increases linearithmically with the amount of data.
    @code java
    void quickSort(int[] array, int low, int high) {
      if (low < high) {
        int pi = partition(array, low, high);
        quickSort(array, low, pi - 1);
        quickSort(array, pi + 1, high);
      }
    }
    int partition(int[] array, int low, int high) {
      int pivot = array[high];
      int i = low - 1;
      for (int j = low; j < high; j++) {
        if (array[j] < pivot) {
          i++;
          int temp = array[i];
          array[i] = array[j];
          array[j] = temp;
        }
      }
      int temp = array[i + 1];
      array[i + 1] = array[high];
      array[high] = temp;
      return i + 1;
    }
    @end

*** O(n^2) - Quadratic Time
    - The number of steps increases quadratically with the amount of data.
    @code java
    void bubbleSort(int[] array) {
      int n = array.length;
      for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
          if (array[j] > array[j + 1]) {
            int temp = array[j];
            array[j] = array[j + 1];
            array[j + 1] = temp;
          }
        }
      }
    }
    @end

*** O(n!) - Factorial Time
    - The number of steps increases factorially with the amount of data.
    @code java
    void permute(String str, int l, int r) {
      if (l == r) {
        System.out.println(str);
      } else {
        for (int i = l; i <= r; i++) {
          str = swap(str, l, i);
          permute(str, l + 1, r);
          str = swap(str, l, i);
        }
      }
    }
    String swap(String str, int i, int j) {
      char temp;
      char[] charArray = str.toCharArray();
      temp = charArray[i];
      charArray[i] = charArray[j];
      charArray[j] = temp;
      return String.valueOf(charArray);
    }
    @end

*** [Time vs Data Graph]{./src/Complexity/TimeComplexityWithBigONotation.jpg}
