* [Merge Sort Algorithm]{/ MergeSort.java}

  - Merge Sort is a *recursive* algorithm that merges two sorted arrays into one sorted array.
  - It divides the array into two halves, sorts the two halves, and then merges the two halves.
  - It has a time complexity of O(n log n), Quasilinear time complexity.
  - Space complexity is O(n).

  @code java
  private static void mergeSort(int[] array) {
    int length = array.length;
    if (length <= 1) {
      return;
    }
    int middle = length / 2;
    int[] leftArray = new int[middle];
    int[] rightArray = new int[length - middle];

    int i = 0; // for leftArray
    int j = 0; // for rightArray

    for (; i < length; i++) {
      if (i < middle) {
        leftArray[i] = array[i];
      } else {
        rightArray[j] = array[i];
        j++;
      }
    }

    mergeSort(leftArray);
    mergeSort(rightArray);
    merge(leftArray, rightArray, array);
  }
  private static void merge(int[] leftArray, int[] rightArray, int[] array) {
    int leftSize = array.length / 2;
    int rightSize = array.length - leftSize;
    int i = 0, l = 0, r = 0;

    while (l < leftSize && r < rightSize) {
      if (leftArray[l] < rightArray[r]) {
        array[i++] = leftArray[l++];
      } else {
        array[i++] = rightArray[r++];
      }
    }

    while (l < leftSize) {
      array[i++] = leftArray[l++];
    }

    while (r < rightSize) {
      array[i++] = rightArray[r++];
    }
  }
  @end

  @code java
  // another implementation
  void merge(int arr[], int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;
    int[] leftArray = new int[n1];
    int[] rightArray = new int[n2];

    for (int i = 0; i < leftArray.length; i++) {
      leftArray[i] = arr[l + i];
    }
    for (int i = 0; i < rightArray.length; i++) {
      rightArray[i] = arr[m + 1 + i];
    }

    int i = 0, j = 0;
    int k = l;
    while (i < n1 && j < n2) {
      if (leftArray[i] <= rightArray[j]) {
        arr[k++] = leftArray[i++];
      } else {
        arr[k++] = rightArray[j++];
      }
    }

    while (i < n1) {
      arr[k++] = leftArray[i++];
    }
    while (j < n2) {
      arr[k++] = rightArray[j++];
    }
  }

  void mergeSort(int arr[], int l, int r) {
    if (l < r) {
      int mid = l + (r - l) / 2;
      mergeSort(arr, l, mid);
      mergeSort(arr, mid + 1, r);
      merge(arr, l, mid, r);
    }
  }
  @end
