* Bubble Srot Algorithm

  - Complexity: O(n^2)
  - Small Data Sets: Fine
  - Large Data Sets: BAD

  @code java
  private static void bubbleSort(int[] arr) {
    for (int i = 0; i < arr.length - 1; i++) {
      for (int j = 0; j < arr.length - i - 1; j++) {
        if (arr[j] > arr[j + 1]) {
          int temp = arr[j];
          arr[j] = arr[j + 1];
          arr[j + 1] = temp;
        }
      }
    }
  }
  @end

  - In the iterative method: In the first iteration, we selected the range 0 to n-1 and swaped adjacent elements `if (arr[i] > arr[i+1])` until the maximum element reached the (n-1)th index. Similarly, in the second iteration, the second maximum element reached the (n-2)th index. So, the sorting basically occured in the backward direction.  After (n-1) such iterations we got the sorted array.

  @code java
  private void recursiveBubbleSort(int[] arr, int n){
    if (n ==1) {
      return;
    }
    int didSwap = 0;
    for (int j = 0; j <= n -2; j++) {
      if (arr[j] > arr[j+1]) {
        int temp = arr[j + 1];
        arr[j + 1] = arr[j];
        arr[j] = temp;
      }
    }
    // if no swapping happens, the array is already sorted.
    if (didSwap == 0) return;
    recursiveBubbleSort(arr, n - 1);
  }
  @end
