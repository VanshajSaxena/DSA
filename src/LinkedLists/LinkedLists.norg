* *Linked List Data Structure*

  - A linked list is a fundamental data structure in computer science. It mainly allows efficient insertion and deletion operations compared to arrays. Like arrays, it is also used to implement other data structures like stack, queue and deque.
  - A linked list is a linear data structure that consists of a series of nodes connected by pointers (in C or C++) or references (in Java, Python and JavaScript). Each node contains data and a pointer reference to the next node in the list. Unlike arrays, linked lists allow for efficient insertion or removal of elements from any position in the list, as the nodes are not stored contiguously in memory.

** *Here is comparison of Linked List and Array:*

   - *Linked List:*

   Data Structure: Non-contiguous
   Memory Allocation: Typically allocated one by one to individual elements
   Insertion/Deletion: Efficient | Complexity: O(1)
   Access: Sequential | Complexity: O(n)

   - *Array:*

   Data Structure: Contiguous
   Memory Allocation: Typically allocated to the whole array
   Insertion/Deletion: Inefficient | Complexity: O(n)
   Access: Random | Complexity: O(1)

** *Here is a simple representation of a linked list:*

   HEAD -> [Data|Next] -> [Data|Next] -> [Data|Next] -> TAIL [NULL]

   - *Node:* A single element of a linked list that stores data and a reference to the next node in the list.
   - *Head:* A reference to the first node in the list.
   - *Tail:* A reference to the last node in the list.

** *Characteristics of Linked List:*

   - *Dynamic:* Linked lists can be easily resized by adding or removing nodes.
   - *Non-contiguous:* Nodes are stored in random memory locations and connected by pointers.
   - *Sequential access:* Nodes can only be accessed sequentially, starting from the head of the list.

** *Operations on Linked List:*

   - *Creation:* Creating a new linked list or adding a new node to an existing list.
   - *Traversal:* Iterating through the list and accessing each node.
   - *Insertion:* Adding a new node at a specific position in the list.
   - *Deletion:* Removing a node from the list.
   - *Search:* Finding a node with a specific value in the list.
