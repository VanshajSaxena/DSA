* String Class in Java

  - The string is a sequence of characters. In Java, objects of String are *immutable* which means a constant and cannot be changed once created.

  In Java, there are two primary ways to create a `String` object: using a string literal and using the `new` keyword. The main differences between these two approaches relate to memory management and performance.

** String Literal

   When you create a string using a string literal, Java checks the string pool to see if an identical string already exists. If it does, a reference to the existing string is returned. If not, a new string is created and placed in the string pool.

   Example:
   @code java
   String str1 = "Hello";
   String str2 = "Hello";
   @end
   In this case, `str1` and `str2` both refer to the same string object in the string pool. This approach saves memory because it avoids creating duplicate strings.

** Using the `new` Keyword

   When you create a string using the `new` keyword, a new `String` object is created in the heap memory, regardless of whether an identical string exists in the string pool.

   Example:
   @code java
   String str3 = new String("Hello");
   String str4 = new String("Hello");
   @end
   Here, `str3` and `str4` refer to different objects, even though they contain the same sequence of characters. This approach results in the creation of distinct objects, which can consume more memory.

** Key Differences

   1. *Memory Management:*
   - *String Literal:* Reuses strings from the string pool, saving memory.
   - *`new` Keyword:* Always creates a new string object in the heap.

   2. *Performance:*
   - *String Literal:* Generally more efficient due to reuse of objects.
   - *`new` Keyword:* Less efficient because it always creates new objects.

   3. *Object Equality:*
   - *String Literal:* 
   @code java
   String str1 = "Hello";
   String str2 = "Hello";
   System.out.println(str1 == str2); // true
   @end
   The `==` operator returns `true` because `str1` and `str2` refer to the same object in the string pool.

   - *`new` Keyword:* 
   @code java
   String str3 = new String("Hello");
   String str4 = new String("Hello");
   System.out.println(str3 == str4); // false
   @end
   The `==` operator returns `false` because `str3` and `str4` refer to different objects in the heap.

** String by Constructors

   - It is also possible to create strings by decoding byte array. The platforms default character set is used to decode the byte array.
   @code java
   byte[] b_arr = {71, 101, 101, 107, 115};
   String s_byte = new String(b_arr);
   @end
   - Construct a new String by decoding the byte array. It uses the char_set for decoding.
   @code java
   byte[] b_arr = {71, 101, 101, 107, 115};
   String s_byte = String(b_arr, Charset.defaultCharset());
   @end
   - Construct a new String by decoding the char array. It uses the char_set for decoding.
   @code java
   char[] char_arr = {'V', 'a', 'n', 's', 'h', 'a', 'j'};
   String s_char = String(char_arr);
   @end
   - Allocates a new string from the string in s_buffer.
   @code java
   StringBuffer s_buffer = new StringBuffer("Vanshaj");
   String s_sbf = String(s_buffer);
   @end
   - Allocates a new string from the string in s_builder.
   @code java
   StringBuffer s_builder = new StringBuilder("Vanshaj");
   String s_sbu = String(s_builder);
   @end

** Summary

   - Use string literals when you want to leverage the string pool for memory efficiency and performance.
   - Use the `new` keyword when you explicitly need a new `String` object, although this is less common in practice.
