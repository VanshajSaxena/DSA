* Heap Data Structure
  A *Heap* is a complete binary tree data structure that satisfies the heap property. 

** The Heap Property
   For every node, the value of its children is greater than or equal to its own value. *Heaps* are usually used to implement priority queues, where the smallest (or largest) element is always at the root of the tree.

** Types of Heaps
   ~ Min Heap:
     In a Min Heap, the parent node is smaller than or equal to the child nodes.
   ~ Max Heap:
     In a Max Heap, the parent node is greater than or equal to the child nodes.

** Heap Operations:
   ~ Insertion:
     Inserting a new element at the end of the heap and then heapifying it.
   ~ Deletion:
     Removing the root element and then heapifying the tree.
   ~ Heapify:
     The process of converting a binary tree into a heap is called heapify.
   ~ Extract Min/Max:
     Removing the root element of the heap.
   ~ Build Heap:
     Building a heap from an array of elements.

** Properties of a Heap
   ~ Complete Binary Tree: A heap tree is a complete binary tree, meaning all levels of the tree are fully filled except possibly the last level, which is filled from left to right. This property ensures that the tree is efficiently represented using an array.
   ~ Heap Property: This property ensures that the minimum (or maximum) element is always at the root of the tree according to the heap type.
   ~ Parent-Child Relationship: The relationship between a parent node at index ‘i’ and its children is given by the formulas: left child at index 2i+1 and right child at index 2i+2 for 0-based indexing of node numbers.
   ~ Efficient Insertion and Removal: Insertion and removal operations in heap trees are efficient. New elements are inserted at the next available position in the bottom-rightmost level, and the heap property is restored by comparing the element with its parent and swapping if necessary. Removal of the root element involves replacing it with the last element and heapifying down.
   ~ Efficient Access to Extremal Elements: The minimum or maximum element is always at the root of the heap, allowing constant-time access.

** Applications of Heap
   - *Heaps* are commonly used to implement priority queues, where elements are retrieved based on their priority (maximum or minimum value).
   - Heapsort is a sorting algorithm that uses a heap to sort an array in ascending or descending order.
   - *Heaps* are used in graph algorithms like Dijkstra’s algorithm and Prim’s algorithm for finding the shortest paths and minimum spanning trees.
