* Medium Problems

** ( ) [Number of Islands]{https://leetcode.com/problems/number-of-islands/description/}

   %TOPICS: Depth_First_Search, Breadth_First_Search%

*** (x) Approach One (Recursive DFS)

    The idea is simple, iteratively visit each cell in the gird, when a land
    cell ('`1`') is found, recursively sink all the land cells adjacent of this
    land cell by changing their value to '`0`'. Essentially no land cell will
    be visited more than once, hence when the recursive function will return
    all the land cells adjacent to the current cell would have been sunk by
    then. This means only cells that were completely disconnected to other land
    cells would contribute to number of islands.

    @code python
    def numIslands(self, grid: List[List[str]]) -> int:
        m = len(grid)
        n = len(grid[0])
        dirs = [1, 0, -1, 0, 1]

        def sink(i: int, j: int):
            grid[i][j] = "0"
            for k in range(4):
                new_i = dirs[k] + i
                new_j = dirs[k + 1] + j
                if (
                    new_i >= 0
                    and new_j >= 0
                    and new_i < m
                    and new_j < n
                    and grid[new_i][new_j] == "1"
                ):
                    sink(new_i, new_j)
        count = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] == "1":
                    sink(i, j)
                    count += 1
        return count
    @end

    *Time Complexity*: The algorithm do not revisit cells that have been sunk,
    hence the overall time complexity will be $O(m \times n)$.
    *Space Complexity*: The worst case space complexity will be $O(m \times n)$
    when the grid will be filled with all '`1`'s, due to the recursion stack.

*** (x) Approach Two (Iterative DFS)

    The approach is simple as in approach one, we try to get rid of recursion
    stack by using an actual stack.
    
    @code python
    def numIslands(self, grid: List[List[str]]) -> int:
        m = len(grid)
        n = len(grid[0])
        dirs = [1, 0, -1, 0, 1]

        def sink(i: int, j: int):
            stack = [(i, j)]
            while stack:
                i, j = stack.pop()
                grid[i][j] = "0"
                for k in range(4):
                    new_i = dirs[k] + i
                    new_j = dirs[k + 1] + j
                    if (
                        new_i >= 0
                        and new_j >= 0
                        and new_i < m
                        and new_j < n
                        and grid[new_i][new_j] == "1"
                    ):
                        stack.append((new_i, new_j))
        count = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] == "1":
                    sink(i, j)
                    count += 1
        return count
    @end

    *Time Complexity*: The time complexity doesn't change with the use of an
    actual stack. Hence, $O(m \times n)$.
    *Space Complexity*: Still the worst case space complexity is $O(m \times n)$.

*** (x) Approach Three (BFS)

    The adjacent land cells can also be marked sunk as soon as we encounter
    them, this can be done by visiting all the neighbor cells first. We can use
    a double ended queue to process cells in a BFS manner.

    *Unlike DFS, we need to immediately mark adjacent cells that we encounter
    as sunk, not doing so will add the same cell multiple times into the queue,
    as queue processes elements in FIFO manner, causing some cells to assume
    that their adjacent cell hasn't been processed before and adding it to the
    queue which was already in the queue due to some other cell.*

    @code python
    def numIslands(self, grid: List[List[str]]) -> int:
        m = len(grid)
        n = len(grid[0])
        dirs = [1, 0, -1, 0, 1]

        def sink(i: int, j: int):
            queue = deque()
            queue.append((i, j))
            while queue:
                i, j = queue.popleft()
                grid[i][j] = "0"
                for k in range(4):
                    new_i = dirs[k] + i
                    new_j = dirs[k + 1] + j
                    if (
                        new_i >= 0
                        and new_j >= 0
                        and new_i < m
                        and new_j < n
                        and grid[new_i][new_j] == "1"
                    ):
                        queue.append((new_i, new_j))
                        # mark neighbor as visited immediately
                        grid[new_i][new_j] = "0"
        count = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] == "1":
                    sink(i, j)
                    count += 1
        return count
    @end

    *Time Complexity*: $O(m \times n)$
    *Space Complexity*: $O(m \times n)$
