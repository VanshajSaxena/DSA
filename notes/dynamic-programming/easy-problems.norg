* ( ) Easy Problems

** (x) [Climbing Stairs]{https://leetcode.com/problems/climbing-stairs/description/}

   %TOPICS: Dynamic_Programming, Memoization, Tabulation%

*** (x) Approach One (Recursion)

    This could simply be thought of as a decision problem, where at each step
    either we take two steps or a single step. We increment the count each time
    we reach the top of the staircase.

    @code python
    def climbStairs(self, n: int) -> int:
        arr = [0] # lists are mutable
        def climb(idx, arr):
            if idx == n:
                arr[0] += 1
                return
            if n - idx >= 2:
                climb(idx + 2, arr)
            if n - idx >= 1:
                climb(idx + 1, arr)
        climb(0, arr)
        return arr[0]
    @end

    *Time Complexity*: Exponential time complexity of $O(2^n)$. This is highly
    inefficient even for small values of `n`.

*** (x) Approach Two (Memoization)

    The previous approach can be improved using a cache dictionary to store the
    calculated results. And using them later to avoid recalculating the same
    results.

    @code python
    def climbStairs(self, n: int) -> int:
        cache = {}
        def climb(idx, cache) -> int:
            if idx == n:
                return 1
            if idx in cache:
                return cache[idx]
            if n - idx >= 1:
                result = climb(idx + 1, cache)
                cache[idx] = result
            if n - idx >= 2:
                result = climb(idx + 2, cache)
                cache[idx] += result # notice the cache is updated here
            return cache[idx]
        return climb(0, cache)
    @end


    *Time Complexity*: At most `n` calculations are being done, hence $O(n)$.
    *Space Complexity*: $O(n)$ for recursive call stack, $O(n)$ for cache.
    Overall $O(n)$.

*** (x) Approach Three (Tabulation)

    The problem can be solved from the subproblems first, building the solution
    from the bottom.

    @code python
    def climbStairs(self, n: int) -> int:
        dp = [0] * (n + 1)
        dp[n] = 1  # single way of reaching the top, while you're on the top
        for i in range(n - 1, -1, -1):
            dp[i] = dp[i + 1]
            if i + 2 <= n:
                dp[i] += dp[i + 2]  # if possible to take two steps
        return dp[0]
    @end

    *Time Complexity*: The loop runs `n` times, hence $O(n)$.
    *Space Complexity*: `dp` array of size `n + 1`, hence $O(n)$.

*** (x) Approach Four (Optimised Tabulation)

    This problem is just a special case of the Fibonacci sequence. The number
    of ways to reach the top of the staircase is the sum of the number of ways
    to reach the previous two steps.

    @code python
    def climbStairs(self, n: int) -> int:
        if n <= 3:
            return n
        prev1 = 3
        prev2 = 2
        result = 0
        for _ in range(n - 3):
            result = prev1 + prev2
            prev2 = prev1
            prev1 = result
        return result
    @end

    *Time Complexity*: $O(n)$
    *Space Complexity*: $O(1)$

** ( ) [Min Cost Climbing Stairs]{https://leetcode.com/problems/min-cost-climbing-stairs/description/}

   %TOPICS: Dynamic_Programming, Memoization, Tabulation%

*** (x) Approach One

    The problem can be visualised as a decision problem, where at each step we
    decide whether to take one step or two steps. At each step we add the cost
    of the step to the running cost. At the end when the top of the staircase
    is reached we look if we previously visited the top with a lower cost. We
    choose the minimum of the running cost and the previous minimum cost.

    @code python
    import math
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        def minCost(idx, curr_cost, min_cost) -> int:
            if idx == len(cost):
                min_cost = min(curr_cost, min_cost)
                return min_cost
            curr_cost += cost[idx]
            if idx + 1 <= len(cost):
                min_cost = minCost(idx + 1, curr_cost, min_cost)
            if idx + 2 <= len(cost):
                min_cost = minCost(idx + 2, curr_cost, min_cost)
            return min_cost
        return min(minCost(0, 0, math.inf), minCost(1, 0, math.inf))
    @end

    The above code calculates the min cost by spawning two calls at each step,
    each unique call is calculated independently even if the same index is
    reached with different accumulated costs. The branch carries its own
    running total (`curr_cost`), and the comparison for `min_cost` occur at the
    leaves. The `min_cost` is bubbled up through the call stack.

    *Time Complexity*: This has an exponential time complexity of $O(2^n)$.
    *Space Complexity*: The maximum depth of the recursion stack is `n`, where
    we take all the single steps to the top, hence the space complexity is
    $O(n)$.

*** (+) Approach Two (Memoization)

    The previous approach can be improved by storing the results of the already
    calculated steps.

    @code python
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        cache = {}
        def minCost(idx: int) -> int:
            if idx >= len(cost):
                return 0
            if idx in cache:
                return cache[idx]
            cache[idx] = cost[idx] + min(minCost(idx + 1), minCost(idx + 2))
            return cache[idx]
        return min(minCost(0), minCost(1))
    @end

    Due to caching, one state is calculated only once. Instead of $2^n$ calls,
    the number of unique states is limited to at most `n` (`n` being the length
    of the staircase cost array).

    *Time Complexity*: We calculate the cost of each step at most once, hence
    time complexity is $O(n)$.
    *Space Complexity*: The space complexity is still $O(n)$, because of the
    recursion depth and the cache dictionary.

*** ( ) Approach Three (Tabulation)

    The problem can be solved iteratively by building the solutions to the
    subproblems first, and then creating the solutions to the overall problem.
    The *recurrence relation* for this problem can be stated as:

    @math
    \[
    dp[i] = cost[i] + min(dp[i + 1], dp[i + 2])
    \]
    @end

    @code python
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        n = len(cost)
        dp = [0] * (n + 2)     
        for i in range(n - 1, -1, -1):
            dp[i] = cost[i] + min(dp[i + 1], dp[i + 2])
        return min(dp[0], dp[1])
    @end

    *Time Complexity*: This has a time complexity of $O(n)$.
    *Space Complexity*: The space used by the `dp` array accounts for $O(n)$
    space complexity.

