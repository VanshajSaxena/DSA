* Graph
  - A graph is a collection of nodes (or vertices) and edges that connect pairs of nodes. 
  - Graphs can be directed or undirected.
  - Graphs can be weighted or unweighted.

** Terminology
   - Vertex (node): A fundamental part of a graph. It can have a name, which we call the "key."
   - Edge (link): A connection between two vertices.
   - Weight: Edges can be weighted to show that there is a cost to go from one vertex to another.

** Types of Graphs
   - Directed Graphs: A graph in which an edge has a direction.
   - Undirected Graphs: A graph in which an edge does not have a direction.
   - Weighted Graphs: A graph with numbers assigned to its edges.
   - Unweighted Graphs: A graph with no weights assigned to its edges.

** Representing a Graph
   - Adjacency Matrix: A two-dimensional matrix that is used to represent a graph.
   - Adjacency List: A collection of linked lists or arrays that lists all of the other vertices that are connected.

*** Adjacency Matrix
    - A two-dimensional matrix, in which the rows represent source vertices and columns represent destination vertices.
    - Data on edges and vertices are stored in the matrix.
    - If the graph is undirected, the matrix is symmetric.
    - Pros: Removing an edge takes O(1) time. Queries like whether there is an edge from vertex 'u' to vertex 'v' are efficient and can be done in O(1) time.
    - Cons: Consumes more space O(V^2). Even if the graph is sparse (contains fewer edges), it still consumes the same amount of space. Adding a vertex is O(V^2) time.

*** Adjacency List
    - A collection of linked lists or array that lists all of the other vertices that are connected.
    - *Each LinkedList has a unique node at the head.*
    - All adjacent neighbors to that node are added to that node's LinkedList at the tail.
    - Pros: Saves space O(|V|+|E|). In the worst case, there can be C(V, 2) number of edges in a graph thus consuming O(V^2) space. Adding a vertex is easier.
    - Cons: Queries like whether there is an edge from vertex u to vertex v are not efficient and can be done O(V).
