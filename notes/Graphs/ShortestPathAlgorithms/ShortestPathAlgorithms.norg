* [*1. Dijkstra’s Algorithm*]{./DijkstrasAlgorithm.java}
  - *Use Case*: Finds the shortest path from a single source to all other nodes in a graph with *non-negative edge weights*.
  - *Approach*: Greedy.
  - *Time Complexity*:
  - \(O(V^2)\) with an adjacency matrix.
  - \(O((V + E) \log V)\) with a priority queue and adjacency list.
  - *Limitations*: Does not work correctly with negative edge weights.

* *2. Bellman-Ford Algorithm*
  - *Use Case*: Finds the shortest path from a single source to all other nodes in a graph, *including graphs with negative edge weights*.
  - *Approach*: Dynamic programming (relaxes edges repeatedly).
  - *Time Complexity*: \(O(V \cdot E)\).
  - *Limitations*: Slower than Dijkstra's algorithm for graphs with non-negative weights.

* *3. Floyd-Warshall Algorithm*
  - *Use Case*: Computes shortest paths between *all pairs of nodes* in a graph. Works with graphs having negative weights but no negative cycles.
  - *Approach*: Dynamic programming.
  - *Time Complexity*: \(O(V^3)\).
  - *Limitations*: Inefficient for sparse graphs.

* *4. A\ (A-star) Algorithm*
  - *Use Case*: Finds the shortest path from a start node to a goal node in graphs, *optimized using heuristics*.
  - *Approach*: Greedy search with a heuristic function.
  - *Time Complexity*: Depends on the heuristic; \(O(E)\) in the best case.
  - *Limitations*: Requires an admissible and consistent heuristic to guarantee optimality.

* *5. Johnson’s Algorithm*
  - *Use Case*: Computes shortest paths between *all pairs of nodes*, suitable for graphs with *negative edge weights*.
  - *Approach*: Uses Bellman-Ford to reweight the graph and then Dijkstra's algorithm for each node.
  - *Time Complexity*: \(O(V^2 \log V + V \cdot E)\).

* *6. Breadth-First Search (BFS)*
  - *Use Case*: Finds the shortest path in an *unweighted graph*.
  - *Approach*: Explores all nodes at the current depth before moving to the next depth level.
  - *Time Complexity*: \(O(V + E)\).

* *7. Bidirectional Dijkstra*
  - *Use Case*: Optimized version of Dijkstra's algorithm for finding the shortest path between two nodes by searching simultaneously from both the source and the target.
  - *Approach*: Greedy.
  - *Time Complexity*: Roughly half of Dijkstra’s algorithm's runtime for large graphs.

* *8. Yen's Algorithm*
  - *Use Case*: Finds the *k shortest paths* between two nodes in a graph.
  - *Approach*: Extends Dijkstra’s algorithm to handle multiple paths.
  - *Time Complexity*: Depends on \(k\) and the graph structure; generally \(O(k \cdot (V + E) \log V)\).

* *9. Dynamic Programming on DAGs*
  - *Use Case*: Finds shortest paths in a *directed acyclic graph (DAG)*.
  - *Approach*: Topological sorting and dynamic programming.
  - *Time Complexity*: \(O(V + E)\).

* *10. ALT (A\*-Landmarks-Triangle) Algorithm*
  - *Use Case*: A faster heuristic-based variant of A\* for road networks.
  - *Approach*: Uses precomputed landmarks to optimize the heuristic.

* *11. Bidirectional Bellman-Ford*
  - *Use Case*: A bidirectional approach for graphs with negative weights.
  - *Time Complexity*: \(O(V \cdot E / 2)\).

* Choosing the Right Algorithm:
  - *Unweighted graphs*: Use BFS.
  - *Weighted graphs, no negative weights*: Use Dijkstra’s algorithm.
  - *Weighted graphs with negative weights*: Use Bellman-Ford or Johnson’s algorithm.
  - *All-pairs shortest paths*: Use Floyd-Warshall or Johnson’s algorithm.
  - *Specific paths in heuristic-optimizable graphs*: Use A\* or ALT.

