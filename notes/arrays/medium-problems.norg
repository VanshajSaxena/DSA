* Medium Problems

** (x) [Maximum Subarray]{https://leetcode.com/problems/maximum-subarray/description/}

   The most optimal solution is to use Kadane's Algorithm. It is a
   greedy/dynamic programming algorithm that can be used an on array. It is
   used to calculate the maximum sum subarray ending at a particular position
   and typically runs in $O(n)$ time. Basically, maintain a running sum
   variable that resets to zero if it gets less than zero (Because including a
   negative number in the window will only decrease the overall sum). Also
   maintain a global max variable that keeps track of the max sum encountered
   so far for any window.

   Another way is to use the sliding window technique. The idea is to have two
   pointers, `left` and `right` and a running sum that represents the sum of
   our current window. Similar to the previous approach, we set our `left`
   pointer to the `right` pointer if the running sum gets less than zero. By
   maintaining another pair of variables (pointers), say `maxL` and `maxR` to
   the boundary of the max sum encountered we can also return the actual
   indices of the maximum subarray. If our running sum exceeds the global max
   sum, we update the `maxL` and `maxR` pointers and the global max sum.

** (x) [Best Time to Buy and Sell Stocks]{https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/}

   Using the same idea as the [Maximum Subarray] problem, at each iteration
   update a global max variable to the max profit found so far and if the
   current price of the stock declines even more update the min variable to
   counter for future profits. The profit at each iteration is the difference
   between the current price and the min price encountered so far. Maximum of
   the profits for each iteration is the global max profit.

   @code python
   def maxProfit(self, prices: List[int]) -> int:
     max_sum = 0
     min_price = prices[0]  # min
     for curr_price in prices:
       min_price = min(min_price, curr_price)
       max_sum = max(max_sum, curr_price - min_price)
       return max_sum
   @end

** (x) [Rearrange Array Elements by Sign]{https://leetcode.com/problems/rearrange-array-elements-by-sign/description/}

   The idea is to use the two-pointer technique. Have two pointers `left` and
   `right` and keep swapping the elements at these pointers if the element at
   the left pointer is negative and the element at the right pointer is
   positive. This way we can rearrange the array elements by sign.

** (x) [Next Permutation]{https://leetcode.com/problems/next-permutation/description/}

   .image https://leetcode.com/media/original_images/31_nums_graph.png

   Because you need to find the just greater number out of all the permutations
   of the array. The idea is to realize that you only want to replace any
   number which is at most right as it can be in the array. Because swapping
   with a number from the left would cause a big change in the number. Thus, to
   find which number you need to swap, you need to find the first number from
   the right which is smaller than the number at the right. This number will
   cause the least change in the value of the number when swapped with a number
   which is just greater than it, to the right of it.


