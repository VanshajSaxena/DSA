* Medium Problems

** [Maximum Subarray]{https://leetcode.com/problems/maximum-subarray/description/}

   The most optimal solution is to use Kadane's Algorithm. It is a
   greedy/dynamic programming algorithm that can be used an on array. It is
   used to calculate the maximum sum subarray ending at a particular position
   and typically runs in $O(n)$ time. Basically, maintain a running sum
   variable that resets to zero if it gets less than zero (Because including
   zero in the window will only decrease the overall sum). Also maintain a
   global max variable that keeps track of the max sum encountered so far for
   any window.

   Another way is to use the sliding window technique. The idea is to have two
   pointer `left` and `right` and a running sum that represents the sum of our
   current window. Similar to the previous approach, we set our `left` pointer
   to the `right` pointer if the running sum get less than zero. By maintaining
   another pair of variables (pointers), say `maxL` and `maxR` to the boundary
   of the max sum encountered we can also return the actual indices of the
   maximum subarray. If our running sum exceeds the global max sum, we update
   the `maxL` and `maxR` pointers and the global max sum.

