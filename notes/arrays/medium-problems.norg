* Medium Problems

** (x) [Maximum Subarray]{https://leetcode.com/problems/maximum-subarray/description/}

   The most optimal solution is to use Kadane's Algorithm. It is a
   greedy/dynamic programming algorithm that can be used an on array. It is
   used to calculate the maximum sum subarray ending at a particular position
   and typically runs in $O(n)$ time. Basically, maintain a running sum
   variable that resets to zero if it gets less than zero (Because including a
   negative number in the window will only decrease the overall sum). Also
   maintain a global max variable that keeps track of the max sum encountered
   so far for any window.

   Another way is to use the sliding window technique. The idea is to have two
   pointers, `left` and `right` and a running sum that represents the sum of
   our current window. Similar to the previous approach, we set our `left`
   pointer to the `right` pointer if the running sum gets less than zero. By
   maintaining another pair of variables (pointers), say `maxL` and `maxR` to
   the boundary of the max sum encountered we can also return the actual
   indices of the maximum subarray. If our running sum exceeds the global max
   sum, we update the `maxL` and `maxR` pointers and the global max sum.

** (x) [Best Time to Buy and Sell Stocks]{https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/}

   Using the same idea as the [Maximum Subarray] problem, at each iteration
   update a global max variable to the max profit found so far and if the
   current price of the stock declines even more update the min variable to
   counter for future profits. The profit at each iteration is the difference
   between the current price and the min price encountered so far. Maximum of
   the profits for each iteration is the global max profit.

   @code python
   def maxProfit(self, prices: List[int]) -> int:
     max_sum = 0
     min_price = prices[0]  # min
     for curr_price in prices:
       min_price = min(min_price, curr_price)
       max_sum = max(max_sum, curr_price - min_price)
       return max_sum
   @end

** (x) [Rearrange Array Elements by Sign]{https://leetcode.com/problems/rearrange-array-elements-by-sign/description/}

   The idea is to use the two-pointer technique. Have two pointers `left` and
   `right` and keep swapping the elements at these pointers if the element at
   the left pointer is negative and the element at the right pointer is
   positive. This way we can rearrange the array elements by sign.

** (x) [Next Permutation]{https://leetcode.com/problems/next-permutation/description/}

   .image https://leetcode.com/media/original_images/31_nums_graph.png

   Because you need to find the just greater number out of all the permutations
   of the array. The idea is to realize that you only want to replace any
   number which is at most right as it can be in the array. Because swapping
   with a number from the left would cause a big change in the number. Thus, to
   find which number you need to swap, you need to find the first number from
   the right which is smaller than the number at the right. This number will
   cause the least change in the value of the number when swapped with a number
   which is just greater than it, to the right of it.

** ( ) [Set Matrix Zeros]{https://leetcode.com/problems/set-matrix-zeroes/description/}

   %TOPICS: Matrix%

*** (x) Approach One

    This approach involves first collecting all the coordinates of zero
    elements into additional memory, then for each found zero coordinate we set
    zeros for its row and column using a helper function in second pass.

    @code python
    def setZeroes(self, matrix: List[List[int]]) -> None:
        m = len(matrix)
        n = len(matrix[0])

        zeros = set()
        for i in range(m):
            for j in range(n):
                if matrix[i][j] == 0:
                    zeros.add((i, j))

        def markZeros(i, j):
            # up
            for up in range(i - 1, -1, -1):
                matrix[up][j] = 0
            # down
            for down in range(i + 1, m):
                matrix[down][j] = 0
            # left
            for left in range(j - 1, -1, -1):
                matrix[i][left] = 0
            # right
            for right in range(j + 1, n):
                matrix[i][right] = 0

        while zeros:
            i, j = zeros.pop()
            markZeros(i, j)
    @end

    *Time Complexity*: We first scan for all zero-coordinates, in the worst
    case it would collect $O(m \times n)$ zeros, when there are all zeros. Then
    for each zero found, we run a helper function, which in the worst case
    would contribute $O(m + n)$ time complexity.

    Initial scan: $O(m \times n)$
    Marking Zeros (worst case): $O((m \times n) \times (m + n))$

    Hence, the overall time complexity will be $O((m \times n) \times (m + n))$.
    *Space Complexity*: In the worst case the set would use $O(m \times n)$ space.

*** (x) Approach Two

    In this approach, we use the first row and first column as markers, i.e. if
    we find an element to be zero in the matrix we mark the first row and first
    column to zeros for this element. Before we do that we need to first
    resolve if the first column and first row of the matrix contains a zero,
    this step is needed because if we change the first row or column based on
    some zero element we can not later determine which other elements were
    needed to be marked as zero.

    @code python
    def setZeroes(self, matrix: List[List[int]]) -> None:
        m = len(matrix)
        n = len(matrix[0])

        first_col_has_zeros = False
        first_row_has_zeros = False

        # check if first col contains zero
        for i in range(m):
            if matrix[i][0] == 0:
                first_col_has_zeros = True

        # check if first row contains zero
        for j in range(n):
            if matrix[0][j] == 0:
                first_row_has_zeros = True

        # mark first row and column to zero for any coordinate that has a zero
        # element
        for i in range(1, m):
            for j in range(1, n):
                if matrix[i][j] == 0:
                    matrix[0][j] = 0
                    matrix[i][0] = 0

        # if the first row or column has a marked zero, the element needs to be
        # zero
        for i in range(1, m):
            for j in range(1, n):
                if matrix[0][j] == 0 or matrix[i][0] == 0:
                    matrix[i][j] = 0

        if first_col_has_zeros:
            for i in range(m):
                matrix[i][0] = 0

        if first_row_has_zeros:
            for j in range(n):
                matrix[0][j] = 0
    @end

    *Time Complexity*: $O(m \times n)$
    *Space Complexity*: $O(1)$
