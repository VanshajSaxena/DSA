* ( ) Easy Problems

** (x) [Check If Array is Sorted and Rotated]{https://leetcode.com/problems/check-if-array-is-sorted-and-rotated/description/}

   One of the best way to check if an array is sorted is to use bubble
   sort. It has a best case time complexity of $O(n)$.

   .image sorting-algorithms-complexities.png

** (x) [Remove Duplicates from Sorted Array]{https://leetcode.com/problems/remove-duplicates-from-sorted-array/description/}

   To do it in linear time complexity, use two pointers. One pointer takes care
   of the current index to write to, and the other pointer checks for
   duplicates in the array. Whenever a new element is found, the write pointer
   can be incremented, and the new value can be written.

** (x) [Rotate Array]{https://leetcode.com/problems/rotate-array/}

   The trick is in reversing the array in three separate steps. First, reverse
   the entire array. Then, reverse the first $k$ elements. Finally, reverse the
   remaining $n - k$ elements.

** (x) [Move Zeros]{https://leetcode.com/problems/move-zeroes/}

*** (x) Approach One

    A write pointer that only writes non-zero elements can be maintained to
    sequentially to capture all the non-zero elements, and later the rest of
    the array be filled with zeros.

    @code python
    def moveZeroes(self, nums: List[int]) -> None:
        not_zero = 0
        for i in range(len(nums)):
            if nums[i] != 0:
                nums[not_zero] = nums[i]
                not_zero += 1

        for j in range(not_zero, len(nums)):
            nums[not_zero] = 0
            not_zero += 1
    @end

    *Time Complexity*: $O(n)$
    *Space Complexity*: $O(1)$

*** (x) Approach Two

    The trick to *minimize the operations* is to realize:

    All elements before the slow pointer can be non-zero, And all elements
    between slow pointer and the current can be zeros.

    @code java
    public void moveZeroes(int[] nums) {
      int j = 0;
      for (int i = 0; i < nums.length; i++) {
        if (nums[i] == 0) {
          j++;
        } else {
          int temp = nums[i];
          nums[i] = 0;
          nums[i - j] = temp;
        }
      }
    }
    @end

    *Time Complexity*: $O(n)$
    *Space Complexity*: $O(1)$

** (x) [Missing Number]{https://leetcode.com/problems/missing-number/description/}

   The most optimal solution is to use the XOR operation. The XOR operator
   has a special quality, when two same numbers are XORed they result in 0.
   This special property can be used to find the missing number.

** (x) [Max Consecutive Ones]{https://leetcode.com/problems/max-consecutive-ones/description/}

   You actually need to have a way to cache the state of the number of ones
   encountered before. This state can be stored in a variable, which needs to
   be incremented whenever a one is encountered, and reset to zero whenever a
   zero is encountered. At each step in the iteration process, when you
   encounter a one a global max state can be updated, which will accumulate the
   maximum number of ones encountered so far.

** (x) [Single Number]{https://leetcode.com/problems/single-number/description/}

   [Missing Number]

** (x) [Two Sum]{https://leetcode.com/problems/two-sum/description/}

   This problem can be solved by using a map. At each iteration step, you query
   the map to check if you have encountered a value that could be used to
   create the two sum with the current iteration value.

** (x) [Sort Colors]{https://leetcode.com/problems/sort-colors/description/}

*** (x) Approach One

    Use Dutch National Flag Algorithm, maintaining three pointers: low, mid, high.

    Put low and mid at beginning & high at the end.

    The idea behind the algorithm is to keep all the 0s before the low pointer,
    all the 2s after the high pointer, and all the 1s between the low and high
    pointers. The algorithm moves the mid pointer through the array, comparing
    the value at each position with 1. If the value is 0, the element is swapped
    with the element at the low pointer, and the low and mid pointers are
    incremented. If the value is 2, the element is swapped with the element at
    the high pointer, and the high pointer is decremented. If the value is 1,
    the mid pointer is simply incremented.

    @code python
    def sortColors(self, nums: List[int]) -> None:
        low, mid, high = 0, 0, len(nums) - 1

        def swap(idx1, idx2):
            nums[idx1], nums[idx2] = nums[idx2], nums[idx1]

        while mid <= high:
            if nums[mid] == 0:
                # 0
                swap(low, mid)
                low += 1
                mid += 1
            elif nums[mid] == 1:
                # 1
                mid += 1
            else:
                # 2
                swap(high, mid)
                high -= 1
    @end

    *Time Complexity*: $O(n)$
    *Space Complexity*: $O(1)$

** (x) [Majority Element]{https://leetcode.com/problems/majority-element/description/}

   This uses a clever technique, Moore's Voting Algorithm: It is only works if
   there is a clear majority.

   The intuition behind the Moore's Voting Algorithm is based on the fact that if
   there is a majority element in an array, it will always remain in the lead,
   even after encountering other elements.

   So, if for each candidate element, we cancel out its occurrence with other,
   only the majority candidate element will remain.

** (x) [Apply Operations to an Array]{https://leetcode.com/problems/apply-operations-to-an-array/description/}

   The question demands to apply a series of operations to an array. This can
   be achieved by creating an auxiliary array of the same length and applying
   the operations in order. First double the element and set the next element
   to zero whenever the condition is met. Next by iterating the array, capture
   any non-zero number to the auxiliary array, by incrementing a
   `non-zero-index` at each step. Finally by iterating the array again, fill
   the remaining elements with zeros to the length of the array.

   This give the overall time and space complexity of $O(n)$ and  $O(1)$
   respectively.

   To optimize the memory used by the auxiliary array, we can modify the array
   in-place. It has some implications:

   > In-place algorithms overwrite the input to save space, but sometimes this
   > can cause problems. Here are a couple of situations where an in-place
   > algorithm might not be suitable:

   ~ The algorithm needs to run in a multi-threaded environment without
     exclusive access to the array. Other threads might need to read the array
     as well and may not expect it to be modified.
   ~ Even if there is only a single thread or the algorithm has exclusive
     access to the array while running, the array might need to be reused later
     or by another thread once the lock has been released.

   This can be asked in an interview.

   By maintaining a separate `non-zero-index` variable, we can overwrite the
   array with the current non zero values encountered. And later filling the
   remaining array with zeros. But, this approach still compels at least two
   passes.

   The operations can be applied in a single pass; In this approach when we
   encounter a non zero value we increment our `write-index` variable and swap
   the element at the current index with `write-index` only if our current
   index does not match `write-index` By only incrementing the `write-index`
   when we encounter a non zero value we ensure when we next time meet a non
   zero value the `write-index` will be at a zero value position. Thus we can
   do a swap, which naturally pushes the zero at the end of the array.

   This makes the space complexity to be $O(1)$, as we are not using any extra
   space, but only a few variables.

** (x) [Merge Two 2D Arrays by Summing Values]{https://leetcode.com/problems/merge-two-2d-arrays-by-summing-values/description/}

   This could be done in a single pass and $O(n)$ time complexity by using two
   pointers. Use two pointers to iterate over the two arrays simultaneously.
   For whichever index the id is lesser put that into the list and increment
   the pointer. If the id is same, sum the values and put that into the list.

** (x) [Find the Largest Almost Missing Number]{https://leetcode.com/problems/find-the-largest-almost-missing-integer/description/}

   One way to solve this problem is to actually generate all the subarrays of
   length $k$ by starting at all the possible indices than can contribute to
   $k$ length subarrays. Then, by accumulating each number in each subarray
   into a set, we can maintain a map of frequencies of each number. Finally, by
   iterating over the map, we can find the largest number that has the
   frequency exactly equal to 1. This would have a time complexity of
   $O(n \log{n})$ in the worst case.

   To improve upon the time complexity, we can iterate over the array once and
   accumulate the frequencies of each number in the subarray into a map. If
   $k$ is 1 the largest almost missing will just be largest number in the
   array with frequency 1. If $k$ is equal to array length, the largest
   missing number will be the largest number irrespective of the frequency. If
   k is in between 1 and array length, the largest almost missing number can
   only be at the start or the end of the array. Whichever is the larger will
   be the largest missing number. This has the time and space complexity of
   $O(n)$.

** (x) [Remove Element]{https://leetcode.com/problems/remove-element/description/}

   %TOPICS: Two_Pointer%

*** (x) Approach One

    Instead of focusing on indices where element is equal to `val`, shift the
    focus to only elements that should be in the array after the entire array
    is processed.

    By maintaining two indices, say `read` and `write` we can read all the
    elements of the array incrementally one by one and whenever we find an
    element not equal to `val` we can write to the `write` index and increment
    it.

    @code python
    def removeElement(self, nums: List[int], val: int) -> int:
        read = 0
        write = 0
        while read < len(nums):
            if nums[read] != val:
                nums[write] = nums[read]
                write += 1
            read += 1
        return write
    @end

    *Time Complexity*: $O(n)$
    *Space Complexity*: $O(1)$

** (x) [Plus One]{https://leetcode.com/problems/plus-one/description/}

   %TOPICS: Math%

*** (x) Approach One

    Start from the right and maintain a carry initialized to `1`. Sum current
    digit and carry, set carry to quotient of $\text{sum} / 10$ and update
    current digit to $\text{sum} \bmod 10$.

    @code python
    def plusOne(self, digits: List[int]) -> List[int]:
        carry = 1
        for i in range(len(digits) - 1, -1, -1):
            sum = carry + digits[i]
            digits[i] = int(sum % 10)
            carry = int(sum / 10)

        if carry > 0:
            digits = [carry] + digits
        return digits
    @end

    *Time Complexity*: $O(n)$
    *Space Complexity*: $O(n)$

*** (x) Approach Two

    This could be done in a single pass if we realize how `digits` array is
    updated with incrementation of 1.

    @code python
    def plusOne(self, digits: List[int]) -> List[int]:
        for i in range(len(digits) - 1, -1, -1):
                # if digits[i] is less than 9, increment and return the digits array
                if digits[i] < 9:
                digits[i] += 1
                return digits
            # if digits[i] is 9, set it to 0 and evaluate the next (left) digit
            digits[i] = 0

        # if the array is still not returned this means digits array had all digits `9`
        # create a new array of `len(digits) + 1` and set digits[0] to 1.
        digits = [0] * (len(digits) + 1)
        digits[0] = 1
        return digits
    @end

    *Time Complexity*: $O(n)$
    *Space Complexity*: $O(n)$

** (x) [Merge Sorted Array]{https://leetcode.com/problems/merge-sorted-array/description/}

   %TOPICS: Two_Pointer%

*** (x) Approach One

    The first approach could be to copy everything from `nums2` to `nums1` from
    the back. As `nums1` already has the required size to accommodate all the
    elements of both the arrays, we can fill everything from `nums2` to
    `nums1`. Then, use the library's sort function.

    *Time Complexity*: $O((m + n) \times \log{(m + n)})$
    *Space Complexity*: The space complexity will be determined by the language
    used. Each language has different space complexity for its library's sort
    function.

*** (x) Approach Two (Two Pointer)

    Start at the right of the `nums1` array using a `write` index, compare the
    elements of `nums1` and `nums2` backwards by placing pointers at `m -1` and
    `n - 1`. Place the element which is smaller to the `write` index and
    decrement the `write` index as well as the written element's index. If the
    values of both the indices match after comparing, write any element of
    choice.

    At the end, fill the remaining elements from the array which still has not
    exhaused.

    @code python
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        idx1 = m - 1
        idx2 = n - 1
        write = m + n - 1
        while idx1 > -1 and idx2 > -1:
            if nums1[idx1] >= nums2[idx2]:
                nums1[write] = nums1[idx1]
                idx1 -= 1
            else:
                nums1[write] = nums2[idx2]
                idx2 -= 1
            write -= 1

        while idx1 > -1:
            nums1[write] = nums1[idx1]
            idx1 -= 1
            write -= 1

        while idx2 > -1:
            nums1[write] = nums2[idx2]
            idx2 -= 1
            write -= 1
    @end

    *Time Complexity*: $O(n + m)$
    *Space Complexity*: $O(1)$

** (x) [Pascal's Triangle]{https://leetcode.com/problems/pascals-triangle/description/}

*** (x) Approach One

    @code python
    def generate(self, numRows: int) -> List[List[int]]:
        triangle = []

        triangle.append([1])

        if numRows == 1:
            return triangle

        for i in range(1, numRows):
            triangle.append([0] * (i + 1))
            curr_row = triangle[i]
            last_row = triangle[i - 1]
            for j in range(i + 1):
                left = last_row[j - 1] if j > 0 else 0
                right = last_row[j] if j < len(last_row) else 0
                curr_row[j] = left + right
        return triangle
    @end

    *Time Complexity*: $O(n^2)$
    *Space Complexity*: $O(n^2)$

    The current implementation is efficient given that the output size is
    $O(n^2)$. Any algorithm must use at least this much of time and space.
    Hence, it is not possible to improve on this algorithm in terms of
    asymptotic complexity.

** (x) [Pascal's Triangle II]{https://leetcode.com/problems/pascals-triangle-ii/description/}

   %TOPICS: Combinatorics%

*** (x) Approach One

    Using the same approach as in [Pascal's Triangle], we can build the
    `rowIndex` row iteratively but, improving on the space complexity by only
    keeping the last row that we need in memory.

    .image pascal-triangle-animated.gif

    @code python
    def generate(self, rowIndex: int) -> List[int]:
        if rowIndex == 0:
            return [1]
        if rowIndex == 1:
            return [1, 1]
        new_row = []
        last_row = [1, 1]
        for i in range(2, rowIndex + 1):
            new_row = [0] * (i + 1)
            for j in range(i + 1):
                left = last_row[j - 1] if j > 0 else 0
                right = last_row[j] if j < len(last_row) else 0
                new_row[j] = left + right
            last_row = new_row

        return new_row
    @end

    *Time Complexity*: The time complexity is $O(n^2)$, as we are computing
    every row prior to `rowIndex` row to compute our required row.
    *Space Complexity*: The space complexity is $O(n)$ considering the space
    used by the output and the two rows in memory.

*** (x) Approach Two (Combinatorics)

    There is a more efficient way to do it using Combinatorics. There is a
    known way to compute the $k\text{th}$ row of Pascal's Triangle in
    $\mathbf{O(n)}$ time using binomial coefficient formula.

    @math
    \[
    C(n, k) = C(n, k - 1) \times \frac{n - k + 1}{k}
    \]
    @end

    We can iteratively build each consecutive element of the $k\text{th}$ row
    of the Pascal's Triangle.

    @code python
    def getRow(self, rowIndex: int) -> List[int]:
        row = [1]
        for k in range(1, rowIndex + 1):
            row.append(row[-1] * (rowIndex - k + 1) // k)
        return row
    @end

    Each iteration step is completed in $O(1)$ time.

    *Time Complexity*: $O(n)$
    *Space Complexity*: $O(n)$
