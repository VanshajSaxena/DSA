* ( ) Easy Problems

** (x) [Check If Array is Sorted and Rotated]{https://leetcode.com/problems/check-if-array-is-sorted-and-rotated/description/}

   One of the best way to check if an array is sorted is to use bubble
   sort. It has a best case time complexity of $O(n)$.

   .image sorting-algorithms-complexities.png

** (x) [Remove Duplicates from Sorted Array]{https://leetcode.com/problems/remove-duplicates-from-sorted-array/description/}

   To do it in linear time complexity, use two pointers. One pointer takes care
   of the current index to write to, and the other pointer checks for
   duplicates in the array. Whenever a new element is found, the write pointer
   can be incremented, and the new value can be written.

** (x) [Rotate Array]{https://leetcode.com/problems/rotate-array/}

   The trick is in reversing the array in three separate steps. First, reverse
   the entire array. Then, reverse the first $k$ elements. Finally, reverse the
   remaining $n - k$ elements.

** (x) [Move Zeros]{https://leetcode.com/problems/move-zeroes/}

   The trick to minimize the operations is to realize:

   All elements before the slow pointer can be non-zero, And all elements
   between slow pointer and the current can be zeros.

** (x) [Missing Number]{https://leetcode.com/problems/missing-number/description/}

   The most optimal solution is to use the XOR operation. The XOR operator
   has a special quality, when two same numbers are XORed they result in 0.
   This special property can be used to find the missing number.

** (x) [Max Consecutive Ones]{https://leetcode.com/problems/max-consecutive-ones/description/}

   You actually need to have a way to cache the state of the number of ones
   encountered before. This state can be stored in a variable, which needs to
   be incremented whenever a one is encountered, and reset to zero whenever a
   zero is encountered. At each step in the iteration process, when you
   encounter a one a global max state can be updated, which will accumulate the
   maximum number of ones encountered so far.

