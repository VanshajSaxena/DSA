* Easy Problems

** (x) [Convert Sorted Array to Binary Search Tree]{https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/description/}

   %TOPICS: Binary_Search_Tree%

*** (x) Approach One

    Recursively pick the middle of the array, call it the root of the current
    subtree, this will divide the array in two subarrays. Perform the same
    operation on the subarrays. If the range closes (left surpasses right),
    return null.

    @code python
    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:
        n = len(nums)

        def convert(left: int, right: int) -> Optional[TreeNode]:
            if left > right:
                return None
            mid = (right + left) // 2
            node = TreeNode(nums[mid])

            node.left = convert(left, mid - 1)
            node.right = convert(mid + 1, right)

            return node
        convert(0, n - 1)
    @end

    *Time Complexity*: The function process each element once, hence $O(n)$.
    *Space Complexity*: If we count only the extra space, the space complexity
    is $O(\log{n})$ (the max depth of the recursive call stack). But, if we
    also count the output tree, the overall space complexity will be $O(n)$.

** (x) [Invert Binary Tree]{https://leetcode.com/problems/invert-binary-tree/description/}

   %TOPICS: Binary_Tree%

*** (x) Approach One

    Swap the *references* of the left and the right subtrees recursively for
    each node in the tree.

    @code python
    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        if root is None:
            return

        root.left, root.right = root.right, root.left

        self.invertTree(root.left)
        self.invertTree(root.right)

        return root
    @end

    *Time Complexity*: $O(n)$
    *Space Complexity*: $O(\log{n})$

** (x) [Maximum Depth of Binary Tree]{https://leetcode.com/problems/maximum-depth-of-binary-tree/description/}

   %TOPICS: Binary_Tree%

*** (x) Approach One

    Recursively call the `depth` function for each subtree of the current tree
    and add 1 to each branch call. Take the max of both the branches and return
    the `maxDepth`.

    @code python
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        def depth(node):
            if node is None:
                return 0

            left = 1 + depth(node.left)
            right = 1 + depth(node.right)

            maxDepth = max(left, right)
            return maxDepth

        return depth(root)
    @end

    *Time Complexity*: This will traverse all the nodes of the binary tree,
    hence $O(n)$.
    *Space Complexity*: The best case time complexity will be
    $O(\log{n})$ when the tree is balanced, whereas the worst case time
    complexity will be $O(n)$ when the tree is skewed.

** (x) [Diameter of Binary Tree]{https://leetcode.com/problems/diameter-of-binary-tree/description/}

   %TOPICS: Binary_Tree%

*** (x) Approach One

    We have two options to go around this problem, either we return a tuple of
    `max_diameter` and `max(left, right)` or we maintain a global
    `max_diameter` variable. In the solution below we maintain a global state
    variable for simplicity.

    @code python
    def diameterOfBinaryTree(self, root: Optional[TreeNode]) -> int:
        self.max_diameter = 0

        def diameter(node) -> int:
            if not node:
                return 0
            left = diameter(node.left)
            right = diameter(node.right)
            self.max_diameter = max(self.max_diameter, left + right)
            return 1 + max(left, right)

        diameter(root)
        return self.max_diameter
    @end

    *Time Complexity*: $O(n)$
    *Space Complexity*: Best case space complexity will be $O(\log{n})$,
    whereas the worst case time complexity will be $O(n)$.

** (x) [Balanced Binary Tree]{https://leetcode.com/problems/balanced-binary-tree/description/}

   %TOPICS: Binary_Tree%

*** (x) Approach One

    We can recursively visit every node in the tree (as in [Diameter of Binary
    Tree]) and get the height of its left and right subtree, if at any point
    the height difference gets more than one this means we got an unbalanced
    binary tree.

    @code python
    def isBalanced(self, root: Optional[TreeNode]) -> bool:
        # the balance function returns a tuple
        def balance(node):
            left = 0
            left_balanced = True
            if node.left:
                left, left_balanced = balance(node.left)
            right = 0
            right_balanced = True
            if node.right:
                right, right_balanced = balance(node.right)
            depth = 1 + max(left, right)
            balanced = left_balanced and right_balanced # take AND
            if abs(left - right) > 1: # check for difference
                balanced = False
            return (depth, balanced) # return tuple

        if not root: # edge case
            return True
        _, balanced = balance(root)
        return balanced
    @end

    *Time Complexity*: This program has $O(n)$ time complexity as we visit each
    node at least once.
    *Space Complexity*: This program worst case space complexity of $O(n)$ when
    the tree is skewed and there is no early return. The average case space
    complexity will be $O(\log{n})$.

*** (x) Approach Two

    We could use a *sentinel value* to denote the current state of the
    recursive call tree. This sentinel value can resolve to `-1` when we find
    any height-unbalanced tree and can be used to prevent any further
    recursion.

    @code python
    def isBalanced(self, root: Optional[TreeNode]) -> bool:
        def balance(node) -> int:
            if not node:
                return 0
            left_height = balance(node.left)
            if left_height == -1:
                return -1
            right_height = balance(node.right)
            if right_height == -1:
                return -1
            if abs(left_height - right_height) > 1:
                return -1
            return 1 + max(left_height, right_height)
        return balance(root) != -i
    @end

    *Time Complexity*: This program still has the worst case time complexity of
    $O(n)$, but in cases where the tree is found to be unbalanced early we can
    return early, and can avoid exploring large parts of the tree.
    *Space Complexity*: Worst case space complexity is $O(n)$ for a skewed
    tree.

