* Interpolation Search

  - Improved version of binary search, works better than binary search for uniformly distributed arrays

** Complexity:
   - Time: O(log(log(n))) - O(n)
   - worse case: O(n) | values increase exponentially

   ~ *Initialization*:
   -- `low` is initialized to `0`, representing the starting index.
   -- `high` is initialized to `array.length - 1`, representing the last index.

   ~ *Main Loop*:
   -- The loop continues as long as `value` is within the range defined by `array[low]` and `array[high]` and `low <= high`.
   -- A probe position is calculated using the interpolation formula: 
   @math
   \text{probe} = \text{low} + \frac{(\text{high} - \text{low}) \times (\text{value} - \text{array[low]})}{(\text{array[high]} - \text{array[low]})}
   @end
   -- This formula estimates the position where the value might be based on the distribution of values in the array.

   ~ *Probe Evaluation*:
   -- If `array[probe]` equals `value`, the index `probe` is returned.
   -- If `value` is less than `array[probe]`, `high` is updated to `probe - 1`.
   -- If `value` is greater than `array[probe]`, `low` is updated to `probe + 1`.

   ~ *Termination*:
   -- If the value is not found, the method returns `-1`.
