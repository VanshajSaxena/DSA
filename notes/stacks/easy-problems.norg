* Easy Problems

** ( ) [Next Greater Element I]{https://leetcode.com/problems/next-greater-element-i/description/}

   %TOPICS: Monotonic_Stack%

*** (x) Approach One

    The important thing to realize is that the given `nums1` array is a
    *subset* of `nums2` array. Which means if we compute next greater element
    for each of the element of `nums2` and put those into a map, then we are
    guaranteed to find every element of `nums1` in the map.

    One way to do this is to:
    - Start *from the right* of the `nums2` array.
    - For each element that we encounter `num2` in `nums2`, we check if the top
      our stack has elements that are smaller than the current element.
    - We remove every element from the top of our stack that is smaller than
      the current element.
    - The next greater element is `-1` if the stack is emptied, otherwise it is
      the element at the top of the stack (store it in the map).
    - Finally add the current element in the stack for future elements in the
      left.

    This works due to the nature stack keeps the already encountered elements,
    each previously encountered element in the stack is kept in a *monotonically
    decreasing* manner (form bottom to top).

    @code python
    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:
        map = {}
        stack = []
        # notice we are iterating in reverse
        for num2 in reversed(nums2):
            while stack and stack[-1] < num2:
                stack.pop()

            map[num2] = stack[-1] if len(stack) > 0 else -1
            stack.append(num2)

        # create a new list from the map
        return [map[num1] for num1 in nums1]
    @end

    *Time Complexity*: $O(m + n)$
    *Space Complexity*: $O(m + n)$
    Where `m` and `n` are the length of `nums1` and `nums2` respectively.

*** (x) Approach Two

    Another way of doing this is:
    - Start *from the left* of `nums2` array.
    - For each element that we encounter `num2` in `nums2`, we check if our
      stack has elements smaller than the current element.
    - We remove elements from the top of the stack that are smaller than the
      current element and our current element becomes the next greater element
      for each of the removed element.
    - At the end of the loop, all the elements that exists in the map represens
      the elements for which a next greater element exists. Whereas all the
      elements that remain it the stack represents elements for which a next
      greater element does not exist.
    - We map each element in `nums1` to the corresponding next greater elements
      by use of the map (if the element does not exist in the map, the next
      greater element is `-1`).

    This works because at any given moment our stack contains all the elements
    for which we haven't found a next greater element yet. The stack is
    *monotonically decreasing* (from bottom to top). If at any moment we find
    an element in the array to be greater than the top of the stack, we have
    found the next greater element for all the elements down to our stack until
    we don't find an element that is greater than or equal to the current
    number.

    @code python
    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:
        map = {}
        stack = []
        for num2 in nums2:
            while stack and stack[-1] < num2:
                map[stack.pop()] = num2
            stack.append(num2)

        # this is list comprehension with a predicate
        result = [map[num1] if num1 in map else -1 for num1 in nums1]
        return result
    @end

    Unlike the previous approach. In this approach, we only find next greater
    element for the elements whose next greater element exists. And later
    assign `-1` to those elements of `nums1` for which we don't find a next
    greater element in the map.

    *Time Complexity*: $O(m + n)$
    *Space Complexity*: $O(m + n)$
    Where `m` and `n` are the length of `nums1` and `nums2` respectively.
